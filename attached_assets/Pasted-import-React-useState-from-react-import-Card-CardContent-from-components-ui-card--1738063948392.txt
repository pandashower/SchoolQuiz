import React, { useState } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";

const QuizApp = () => {
  const [questions, setQuestions] = useState([]);
  const [newQuestion, setNewQuestion] = useState("");
  const [newAnswers, setNewAnswers] = useState({ A: "", B: "", C: "", D: "" });
  const [correctAnswers, setCorrectAnswers] = useState({ A: false, B: false, C: false, D: false });
  const [quizQuestions, setQuizQuestions] = useState([]);
  const [userAnswers, setUserAnswers] = useState([]);
  const [quizStarted, setQuizStarted] = useState(false);
  const [quizSize, setQuizSize] = useState(5);

  const addQuestion = () => {
    const validAnswers = Object.entries(newAnswers).filter(([key, value]) => value.trim() !== "");
    if (newQuestion.trim() && validAnswers.length > 0 && Object.values(correctAnswers).some((v) => v)) {
      setQuestions([
        ...questions,
        {
          question: newQuestion,
          answers: { ...newAnswers },
          correct: { ...correctAnswers },
        },
      ]);
      setNewQuestion("");
      setNewAnswers({ A: "", B: "", C: "", D: "" });
      setCorrectAnswers({ A: false, B: false, C: false, D: false });
    }
  };

  const startQuiz = () => {
    const shuffledQuestions = [...questions].sort(() => Math.random() - 0.5);
    setQuizQuestions(shuffledQuestions.slice(0, quizSize));
    setUserAnswers([]);
    setQuizStarted(true);
  };

  const handleAnswer = (index, selectedAnswer) => {
    const isCorrect = quizQuestions[index].correct[selectedAnswer];
    setUserAnswers([...userAnswers, { index, isCorrect }]);
  };

  const restartQuiz = () => {
    setQuizStarted(false);
    setQuizQuestions([]);
    setUserAnswers([]);
  };

  const correctAnswersCount = userAnswers.filter((a) => a.isCorrect).length;

  return (
    <div className="p-4">
      <h1 className="text-xl font-bold mb-4">Quiz App</h1>

      {!quizStarted ? (
        <div>
          <div className="mb-4">
            <h2 className="text-lg font-semibold mb-2">Add a Question</h2>
            <Input
              placeholder="Enter your question"
              value={newQuestion}
              onChange={(e) => setNewQuestion(e.target.value)}
              className="mb-2"
            />
            {["A", "B", "C", "D"].map((option) => (
              <div key={option} className="mb-2 flex items-center">
                <Input
                  placeholder={`Answer ${option}`}
                  value={newAnswers[option]}
                  onChange={(e) => setNewAnswers({ ...newAnswers, [option]: e.target.value })}
                  className="mr-2"
                />
                <Checkbox
                  checked={correctAnswers[option]}
                  onCheckedChange={(checked) => setCorrectAnswers({ ...correctAnswers, [option]: checked })}
                />
                <label className="ml-1">Correct</label>
              </div>
            ))}
            <Button onClick={addQuestion} className="mb-4">Add Question</Button>
          </div>

          <div className="mb-4">
            <h2 className="text-lg font-semibold mb-2">Available Questions ({questions.length})</h2>
            <ul>
              {questions.map((q, i) => (
                <li key={i} className="mb-1">{q.question}</li>
              ))}
            </ul>
          </div>

          <div className="mb-4">
            <label className="block mb-2">Select number of questions for the quiz:</label>
            <Input
              type="number"
              value={quizSize}
              onChange={(e) => setQuizSize(Number(e.target.value))}
              className="mb-2"
              min={1}
              max={questions.length}
            />
            <Button onClick={startQuiz} disabled={questions.length === 0}>Start Quiz</Button>
          </div>
        </div>
      ) : (
        <div>
          {quizQuestions.map((q, i) => (
            <Card key={i} className="mb-4">
              <CardContent>
                <h3 className="font-bold mb-2">{q.question}</h3>
                {userAnswers.some((a) => a.index === i) ? (
                  <p className={
                    userAnswers.find((a) => a.index === i).isCorrect
                      ? "text-green-500"
                      : "text-red-500"
                  }>
                    {userAnswers.find((a) => a.index === i).isCorrect
                      ? "Correct!"
                      : `Incorrect! The correct answers are: ${Object.entries(q.correct)
                          .filter(([key, value]) => value)
                          .map(([key]) => key)
                          .join(", ")}`}
                  </p>
                ) : (
                  <div className="grid grid-cols-2 gap-2">
                    {Object.entries(q.answers).map(([key, value]) => (
                      <Button
                        key={key}
                        onClick={() => handleAnswer(i, key)}
                        className="w-full"
                      >
                        {key}: {value}
                      </Button>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          ))}

          {userAnswers.length === quizQuestions.length && (
            <div className="text-center mt-4">
              <h2 className="text-lg font-bold">Quiz Completed!</h2>
              <p>
                You got {correctAnswersCount} out of {quizQuestions.length} correct (
                {((correctAnswersCount / quizQuestions.length) * 100).toFixed(2)}%).
              </p>
              <Button onClick={restartQuiz} className="mt-4">Restart Quiz</Button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default QuizApp;
